def generate_multiplication_table(n, layout='horizontal'):
    """Generate multiplication table as list of lists"""
    if layout == 'horizontal':
        return [[i*j for j in range(1, n+1)] for i in range(1, n+1)]
    else:  # vertical
        return [[i*j for i in range(1, n+1)] for j in range(1, n+1)]

def print_table(table, n):
    """Print the multiplication table neatly"""
    # Calculate maximum width needed for any number
    max_width = len(str(n*n)) + 1
    
    # Print header
    print("\nMultiplication Table")
    print("    ", end="")
    for i in range(1, n+1):
        print(f"{i:>{max_width}}", end="")
    print("\n" + "-"*(max_width*(n+1)))
    
    # Print rows
    for i, row in enumerate(table, 1):
        print(f"{i:3}!", end="")
        for num in row:
            print(f"{num:>{max_width}}", end="")
        print()

def main():
    # Get user input
    try:
        n = int(input("Enter a number to generate multiplication table: "))
        layout = input("Choose layout (horizontal/vertical): ").lower() or 'horizontal'
    except ValueError:
        print("Please enter a valid number.")
        return
    
    # Generate and print table
    table = generate_multiplication_table(n, layout)
    print_table(table, n)
    
    # Show the list structure
    print("\nList of lists structure:")
    print(table)

if __name__ == "__main__":
    main()
